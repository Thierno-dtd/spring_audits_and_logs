# ========================================
# PIPELINE LOGSTASH - SECURITY API
# ========================================

input {
  # Input HTTP pour recevoir les logs depuis Spring Boot
  http {
    port => 7001
    host => "0.0.0.0"
    codec => json
    additional_codecs => {
      "application/json" => "json"
    }
    response_headers => {
      "Access-Control-Allow-Origin" => "*"
      "Content-Type" => "application/json"
      "Access-Control-Allow-Methods" => "POST, GET, OPTIONS"
      "Access-Control-Allow-Headers" => "Content-Type"
    }
    threads => 4
    max_pending_requests => 200
    max_content_length => 100000000
  }

  # Input Beats (optionnel pour Filebeat)
  beats {
    port => 5044
    host => "0.0.0.0"
  }

  # Input pour files locaux (fallback)
  file {
    path => "/usr/share/logstash/logs/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => json
    tags => ["file_input"]
  }
}

filter {
  # Ajout du timestamp si manquant
  if ![timestamp] and ![@timestamp] {
    mutate {
      add_field => { "timestamp" => "%{@timestamp}" }
    }
  }

  # Conversion du timestamp
  if [timestamp] {
    date {
      match => [ "timestamp", "yyyy-MM-dd'T'HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss", "ISO8601" ]
      target => "@timestamp"
    }
  }

  # Classification des logs d'audit
  if [log_type] == "audit" or [logger_name] =~ /AuditService/ {
    mutate {
      add_tag => ["audit", "security-api"]
      add_field => { "index_prefix" => "audit-logs" }
      add_field => { "log_category" => "audit" }
    }

    # Enrichissement des événements d'audit
    if [eventType] == "USER_LOGIN_SUCCESS" {
      mutate {
        add_tag => ["login_success"]
        add_field => { "event_severity" => "info" }
      }
    }

    if [eventType] == "USER_LOGIN_FAILED" {
      mutate {
        add_tag => ["login_failed", "suspicious"]
        add_field => { "event_severity" => "warning" }
      }
    }

    if [eventType] =~ /ADMIN/ {
      mutate {
        add_tag => ["admin_action", "high_privilege"]
        add_field => { "event_severity" => "high" }
      }
    }
  }

  # Classification des logs de sécurité
  if [log_type] == "security" or [logger_name] == "SECURITY" {
    mutate {
      add_tag => ["security", "security-api"]
      add_field => { "index_prefix" => "security-logs" }
      add_field => { "log_category" => "security" }
    }

    # Alertes critiques
    if [threatLevel] == "CRITICAL" {
      mutate {
        add_tag => ["alert", "critical", "immediate_action"]
        add_field => { "alert_priority" => "P1" }
      }
    }

    if [threatLevel] == "HIGH" {
      mutate {
        add_tag => ["alert", "high"]
        add_field => { "alert_priority" => "P2" }
      }
    }

    if [threatLevel] == "MEDIUM" {
      mutate {
        add_tag => ["warning", "medium"]
        add_field => { "alert_priority" => "P3" }
      }
    }
  }

  # Classification des logs applicatifs généraux
  if [application] == "security-api" and ![log_type] {
    mutate {
      add_tag => ["application_log"]
      add_field => { "index_prefix" => "application-logs" }
      add_field => { "log_category" => "application" }
    }
  }

  # Enrichissement géolocalisation des IP
  if [ipAddress] and [ipAddress] != "127.0.0.1" and [ipAddress] != "localhost" and [ipAddress] !~ /^192\.168\./ and [ipAddress] !~ /^10\./ {
    geoip {
      source => "ipAddress"
      target => "geoip"
      add_tag => ["geoip"]
    }

    # Ajouter des champs géographiques supplémentaires
    if [geoip][country_code2] {
      mutate {
        add_field => { "country" => "%{[geoip][country_name]}" }
        add_field => { "country_code" => "%{[geoip][country_code2]}" }
      }
    }
  }

  # Parsing User-Agent
  if [userAgent] {
    useragent {
      source => "userAgent"
      target => "user_agent"
    }

    # Détecter les bots/crawlers
    if [user_agent][name] =~ /bot|crawler|spider/i {
      mutate {
        add_tag => ["bot", "automated"]
      }
    }
  }

  # Détection de patterns suspects
  if [eventType] == "USER_LOGIN_FAILED" {
    mutate {
      add_tag => ["failed_login", "suspicious"]
    }

    # Compter les échecs par IP (approximatif)
    if [ipAddress] {
      mutate {
        add_field => { "suspicious_ip" => "%{ipAddress}" }
      }
    }
  }

  # Détecter les tentatives de brute force
  if [details] =~ /mot de passe incorrect/i {
    mutate {
      add_tag => ["brute_force_attempt"]
    }
  }

  # Enrichir les logs d'erreur
  if [level] == "ERROR" or [logLevel] == "ERROR" {
    mutate {
      add_tag => ["error", "needs_attention"]
      add_field => { "priority" => "high" }
    }
  }

  # Nettoyer les champs vides
  if [details] == "" or [details] == "null" {
    mutate {
      remove_field => ["details"]
    }
  }

  if [userEmail] == "" or [userEmail] == "null" {
    mutate {
      remove_field => ["userEmail"]
    }
  }

  # Ajouter des métadonnées système
  mutate {
    add_field => { "processed_by" => "logstash" }
    add_field => { "processing_timestamp" => "%{@timestamp}" }
    add_field => { "logstash_version" => "8.11.0" }
  }

  # Conversion des types
  if [executionTime] {
    mutate {
      convert => { "executionTime" => "integer" }
    }
  }

  # Anonymisation partielle des emails (RGPD)
  if [userEmail] and [userEmail] != "anonymous" {
    ruby {
      code => '
        email = event.get("userEmail")
        if email && email.include?("@")
          parts = email.split("@")
          if parts[0].length > 3
            anonymized = parts[0][0..2] + "*" * (parts[0].length - 3) + "@" + parts[1]
            event.set("userEmail_anonymized", anonymized)
          end
        end
      '
    }
  }
}

output {
  # Output vers Elasticsearch avec index dynamique
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "%{[index_prefix]:security-logs}-%{+YYYY.MM.dd}"

    # Template pour optimiser le mapping
    template_name => "security-template"
    template => {
      "index_patterns" => ["security-*", "audit-*", "application-*"]
      "settings" => {
        "number_of_shards" => 1
        "number_of_replicas" => 0
        "refresh_interval" => "5s"
        "index.mapping.total_fields.limit" => 2000
      }
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" }
          "timestamp" => { "type" => "date" }
          "eventType" => {
            "type" => "keyword"
            "fields" => {
              "text" => { "type" => "text" }
            }
          }
          "userEmail" => { "type" => "keyword" }
          "userEmail_anonymized" => { "type" => "keyword" }
          "ipAddress" => { "type" => "ip" }
          "threatLevel" => { "type" => "keyword" }
          "details" => {
            "type" => "text"
            "fields" => {
              "keyword" => { "type" => "keyword", "ignore_above" => 256 }
            }
          }
          "geoip" => {
            "properties" => {
              "location" => { "type" => "geo_point" }
            }
          }
          "executionTime" => { "type" => "long" }
          "application" => { "type" => "keyword" }
          "environment" => { "type" => "keyword" }
          "server" => { "type" => "keyword" }
          "log_category" => { "type" => "keyword" }
          "event_severity" => { "type" => "keyword" }
        }
      }
    }

    # Gestion des erreurs
    action => "index"
    failure_type_logging_whitelist => ["parsing_exception"]
  }

  # Output conditionnel pour alertes critiques
  if "critical" in [tags] {
    # Webhook vers système d'alerte
    http {
      url => "http://host.docker.internal:8080/webhook/security-alert"
      http_method => "post"
      format => "json"
      mapping => {
        "alert_type" => "SECURITY_CRITICAL"
        "timestamp" => "%{@timestamp}"
        "event" => "%{eventType}"
        "user" => "%{userEmail}"
        "ip" => "%{ipAddress}"
        "description" => "%{details}"
        "threat_level" => "%{threatLevel}"
        "country" => "%{country}"
        "severity" => "P1"
      }
    }

    # Log critique dans un fichier séparé
    file {
      path => "/usr/share/logstash/logs/critical-alerts.log"
      codec => json_lines
    }
  }

  # Output pour logs de haute priorité
  if "high" in [tags] or "admin_action" in [tags] {
    file {
      path => "/usr/share/logstash/logs/high-priority.log"
      codec => json_lines
    }
  }

  # Debug output (commenter en production)
  if [application] == "security-api" and [environment] != "prod" {
    stdout {
      codec => rubydebug {
        metadata => false
      }
    }
  }

  # Métriques vers monitoring (optionnel)
  if "audit" in [tags] {
    statsd {
      host => "statsd"
      port => 8125
      gauge => {
        "security.audit.events" => 1
      }
    }
  }

  # Dead Letter Queue pour les erreurs
  if "_grokparsefailure" in [tags] or "_jsonparsefailure" in [tags] {
    file {
      path => "/usr/share/logstash/logs/parsing-errors.log"
      codec => json_lines
    }
  }
}