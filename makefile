# ========================================
# MAKEFILE - AUDIT LOGS MICROSERVICE
# ========================================

.DEFAULT_GOAL := help
.PHONY: help install dev build start stop restart clean logs status

# Variables
COMPOSE_FILE = docker-compose.yml
PROJECT_NAME = audit-logs-microservice
BACKUP_DIR = backups
LOG_DIR = logs

help: ## Afficher cette aide
	@echo "üîê Microservice Audit & Logs - Commandes disponibles:"
	@echo ""
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)

# ========================================
# INSTALLATION & CONFIGURATION
# ========================================

install: create-dirs build start health ## Installation compl√®te
	@echo "‚úÖ Installation termin√©e!"
	@echo "üåê API: http://localhost:8080"
	@echo "üìä Kibana: http://localhost:5601"
	@echo "üîç Swagger: http://localhost:8080/swagger-ui.html"

dev: create-dirs ## D√©marrage rapide pour d√©veloppement
	@echo "üöÄ D√©marrage en mode d√©veloppement..."
	docker-compose up -d postgres elasticsearch logstash
	@sleep 10
	@echo "‚úÖ Services de base d√©marr√©s"

create-dirs: ## Cr√©er les r√©pertoires n√©cessaires
	@echo "üìÅ Cr√©ation des r√©pertoires..."
	@mkdir -p $(LOG_DIR) $(BACKUP_DIR) data/{elasticsearch,postgres,redis} nginx
	@echo "‚úÖ R√©pertoires cr√©√©s"

# ========================================
# BUILD & D√âMARRAGE
# ========================================

build: ## Construire les images Docker
	@echo "üî® Construction des images..."
	docker-compose build --no-cache

start: ## D√©marrer tous les services
	@echo "üöÄ D√©marrage des services..."
	docker-compose up -d

stop: ## Arr√™ter tous les services
	@echo "üõë Arr√™t des services..."
	docker-compose down

restart: stop start ## Red√©marrer tous les services

# ========================================
# MONITORING & LOGS
# ========================================

logs: ## Afficher tous les logs
	docker-compose logs

logs-follow: ## Suivre les logs en temps r√©el
	docker-compose logs -f

logs-app: ## Logs de l'application seulement
	docker-compose logs -f audit-service

status: ## Statut des services
	@echo "üìä Statut des services:"
	@docker-compose ps

health: ## V√©rifier la sant√© des services
	@echo "üè• V√©rification sant√©..."
	@curl -s http://localhost:8080/api/v1/audit/health | jq . || echo "‚ùå Service non disponible"

# ========================================
# MAINTENANCE & NETTOYAGE
# ========================================

clean: stop ## Nettoyage complet (ATTENTION: supprime les donn√©es)
	@echo "‚ö†Ô∏è  Nettoyage complet..."
	docker-compose down -v
	docker system prune -f
	@echo "‚úÖ Nettoyage termin√©"

clean-logs: ## Nettoyer les anciens logs
	@echo "üßπ Nettoyage des logs..."
	find $(LOG_DIR) -name "*.log.*" -mtime +30 -delete 2>/dev/null || true
	@echo "‚úÖ Logs nettoy√©s"

# ========================================
# BASE DE DONN√âES
# ========================================

db-connect: ## Se connecter √† la base de donn√©es
	docker-compose exec postgres psql -U audit_user -d audit_db

db-backup: ## Sauvegarder la base de donn√©es
	@echo "üíæ Sauvegarde base de donn√©es..."
	@mkdir -p $(BACKUP_DIR)
	docker-compose exec postgres pg_dump -U audit_user audit_db > $(BACKUP_DIR)/backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "‚úÖ Sauvegarde cr√©√©e dans $(BACKUP_DIR)/"

db-restore: ## Restaurer la base de donn√©es (BACKUP_FILE=chemin)
	@echo "üì• Restauration base de donn√©es..."
	@test -n "$(BACKUP_FILE)" || (echo "‚ùå Sp√©cifiez BACKUP_FILE=chemin"; exit 1)
	docker-compose exec -T postgres psql -U audit_user -d audit_db < $(BACKUP_FILE)
	@echo "‚úÖ Base de donn√©es restaur√©e"

db-reset: ## R√©initialiser la base de donn√©es (ATTENTION: perte de donn√©es)
	@echo "‚ö†Ô∏è  R√©initialisation base de donn√©es..."
	docker-compose exec postgres psql -U audit_user -d audit_db -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"
	@echo "‚úÖ Base de donn√©es r√©initialis√©e"

# ========================================
# ELASTICSEARCH
# ========================================

es-status: ## Statut d'Elasticsearch
	@echo "üîç Statut Elasticsearch:"
	@curl -s http://localhost:9200/_cluster/health | jq . || echo "‚ùå Elasticsearch non disponible"

es-indices: ## Lister les indices Elasticsearch
	@curl -s http://localhost:9200/_cat/indices?v

es-clean-old: ## Nettoyer les anciens indices (plus de 30 jours)
	@echo "üßπ Nettoyage anciens indices..."
	@curl -X DELETE "localhost:9200/*-$(shell date -d '30 days ago' +%Y.%m.%d)" 2>/dev/null || true
	@echo "‚úÖ Anciens indices supprim√©s"

# ========================================
# TESTS & VALIDATION
# ========================================

test-api: ## Tester l'API
	@echo "üß™ Test de l'API..."
	@curl -X POST http://localhost:8080/api/v1/audit/log \
		-H "Content-Type: application/json" \
		-d '{"eventType":"TEST","userEmail":"test@example.com","details":"Test depuis Makefile"}' \
		| jq . || echo "‚ùå Test √©chou√©"

validate: health test-api ## Validation compl√®te du syst√®me

# ========================================
# MONITORING AVANC√â
# ========================================

monitor: ## Monitoring continu
	@echo "üìä Monitoring en cours... (Ctrl+C pour arr√™ter)"
	@while true; do \
		clear; \
		echo "=== AUDIT LOGS MICROSERVICE - MONITORING ==="; \
		echo "Heure: $$(date)"; \
		echo ""; \
		echo "Services:"; \
		docker-compose ps; \
		echo ""; \
		echo "M√©moire Docker:"; \
		docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}" | head -6; \
		echo ""; \
		echo "Espace disque:"; \
		df -h | grep -E '/$|docker'; \
		sleep 5; \
	done

metrics: ## Afficher les m√©triques d√©taill√©es
	@echo "üìà M√©triques du service:"
	@curl -s http://localhost:8080/actuator/metrics | jq . || echo "‚ùå M√©triques non disponibles"

# ========================================
# UTILITAIRES
# ========================================

ports-check: ## V√©rifier les ports utilis√©s
	@echo "üîå Ports en √©coute:"
	@netstat -tlnp | grep -E ':8080|:5432|:9200|:5601|:7001|:6379' || echo "Aucun port trouv√©"

info: ## Informations syst√®me
	@echo "‚ÑπÔ∏è  Informations syst√®me:"
	@echo "Docker version: $$(docker --version)"
	@echo "Docker Compose version: $$(docker-compose --version)"
	@echo "R√©pertoire projet: $$(pwd)"
	@echo "Espace libre: $$(df -h . | tail -1 | awk '{print $$4}')"

# ========================================
# D√âVELOPPEMENT
# ========================================

shell-app: ## Shell dans le conteneur application
	docker-compose exec audit-service /bin/bash

shell-db: ## Shell dans le conteneur PostgreSQL
	docker-compose exec postgres /bin/bash

tail-app: ## Suivre les logs application
	docker-compose logs -f audit-service

# ========================================
# V√âRIFICATIONS SYST√àME
# ========================================

check-requirements: ## V√©rifier les pr√©requis
	@echo "‚úÖ V√©rification des pr√©requis:"
	@command -v docker >/dev/null 2>&1 || (echo "‚ùå Docker non install√©"; exit 1)
	@command -v docker-compose >/dev/null 2>&1 || (echo "‚ùå Docker Compose non install√©"; exit 1)
	@echo "‚úÖ Docker: $$(docker --version)"
	@echo "‚úÖ Docker Compose: $$(docker-compose --version)"
	@echo "‚úÖ Tous les pr√©requis sont satisfaits"

# Maintenance programm√©e (√† lancer via cron)
maintenance: clean-logs es-clean-old ## Maintenance automatique